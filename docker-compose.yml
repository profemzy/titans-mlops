services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: titans_postgres
    environment:
      POSTGRES_DB: titans_finance
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data_engineering/warehouse/init_scripts:/docker-entrypoint-initdb.d
    networks:
      - titans_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: titans_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - titans_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Airflow Database
  airflow-init:
    image: apache/airflow:2.7.3
    container_name: titans_airflow_init
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:password@postgres:5432/titans_finance
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
    volumes:
      - ./data_engineering/airflow/dags:/opt/airflow/dags
      - ./data_engineering/airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./data_engineering:/opt/airflow/data_engineering
      - ./data_science:/opt/airflow/data_science
    networks:
      - titans_network
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin
      "

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.7.3
    container_name: titans_airflow_webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:password@postgres:5432/titans_finance
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    ports:
      - "8081:8080"
    volumes:
      - ./data_engineering/airflow/dags:/opt/airflow/dags
      - ./data_engineering/airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./data_engineering:/opt/airflow/data_engineering
      - ./data_science:/opt/airflow/data_science
    networks:
      - titans_network
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.7.3
    container_name: titans_airflow_scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:password@postgres:5432/titans_finance
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    volumes:
      - ./data_engineering/airflow/dags:/opt/airflow/dags
      - ./data_engineering/airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./data_engineering:/opt/airflow/data_engineering
      - ./data_science:/opt/airflow/data_science
    networks:
      - titans_network
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow Tracking Server
  mlflow:
    image: python:3.11-slim
    container_name: titans_mlflow
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      MLFLOW_BACKEND_STORE_URI: file:///mlflow/mlruns
      MLFLOW_DEFAULT_ARTIFACT_ROOT: file:///mlflow/artifacts
    ports:
      - "5000:5000"
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
      - mlflow_runs:/mlflow/mlruns
      - ./data_science/models:/mlflow/local_models
      - ./scripts:/scripts
    networks:
      - titans_network
    command: >
      bash -c "
        apt-get update && apt-get install -y curl &&
        pip install mlflow scikit-learn joblib &&
        mlflow server --backend-store-uri file:///mlflow/mlruns --default-artifact-root file:///mlflow/artifacts --host 0.0.0.0 --port 5000
      "
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # MLflow Model Registrar - Registers models on startup
  mlflow-init:
    image: python:3.11-slim
    container_name: titans_mlflow_init
    depends_on:
      mlflow:
        condition: service_healthy
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
    volumes:
      - ./data_science/models:/mlflow/local_models:ro
      - ./scripts:/scripts:ro
    networks:
      - titans_network
    command: >
      bash -c "
        pip install mlflow scikit-learn joblib &&
        python /scripts/init_mlflow_models.py
      "

  # Jupyter Lab
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: titans_jupyter
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: "password"
    ports:
      - "8888:8888"
    volumes:
      - .:/home/jovyan/work
      - jupyter_data:/home/jovyan/.jupyter
    networks:
      - titans_network
    user: root
    command: >
      bash -c "
        start-notebook.sh --NotebookApp.token='password' --NotebookApp.password='' --no-browser --allow-root
      "

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: ai_engineering/api/Dockerfile
    container_name: titans_api
    depends_on:
      mlflow:
        condition: service_healthy
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      LOCAL_MODELS_PATH: /app/models
      PYTHONPATH: /app
    volumes:
      - ./data_science/models:/app/models:ro
    ports:
      - "8000:8000"
    networks:
      - titans_network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Streamlit Dashboard
  dashboard:
    build:
      context: .
      dockerfile: ./ai_engineering/frontend/Dockerfile
    container_name: titans_dashboard
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/titans_finance
      REDIS_URL: redis://redis:6379/0
      API_URL: http://api:8000
    ports:
      - "8501:8501"
    volumes:
      - ./data:/app/data
    networks:
      - titans_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: titans_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./mlops/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - titans_network
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: titans_grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./mlops/monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_ADMIN_USER: admin
    networks:
      - titans_network
    profiles:
      - monitoring

  # MinIO Object Storage (S3 compatible)
  minio:
    image: minio/minio:latest
    container_name: titans_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    networks:
      - titans_network
    command: server /data --console-address ":9001"
    profiles:
      - storage

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: titans_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - titans_network
    profiles:
      - logging

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: titans_kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - titans_network
    profiles:
      - logging

  # pgAdmin for PostgreSQL Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: titans_pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@titans.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./mlops/monitoring/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - titans_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mlflow_artifacts:
    driver: local
  mlflow_runs:
    driver: local
  jupyter_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local
  elasticsearch_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  titans_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
