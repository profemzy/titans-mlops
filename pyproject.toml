[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "titans-finance"
version = "0.1.0"
description = "Comprehensive AI Development Lifecycle Project for Financial Transaction Analysis"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
authors = [
    { name = "Titans Finance Team", email = "team@titans-finance.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business :: Financial",
]
keywords = ["machine-learning", "finance", "data-engineering", "mlops", "fastapi"]

dependencies = [
    # Core Data Processing
    "pandas>=2.1.4",
    "numpy>=1.24.3",
    "scipy>=1.11.4",

    # Database and Storage
    "sqlalchemy>=2.0.23",
    "psycopg2-binary>=2.9.9",
    "redis>=5.0.1",

    # FastAPI and Web Framework
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.2",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",
    "passlib[bcrypt]>=1.7.4",

    # Data Science and ML
    "scikit-learn>=1.3.2",
    "xgboost>=2.0.2",

    # Visualization
    "matplotlib>=3.8.2",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
    "streamlit>=1.28.2",

    # MLOps and Monitoring
    "mlflow>=2.8.1",
    "prometheus-client>=0.19.0",

    # Configuration and Environment
    "python-dotenv>=1.0.0",
    "click>=8.1.7",
    "rich>=13.7.0",

    # Data Validation
    "jsonschema>=4.20.0",

    # HTTP and API clients
    "requests>=2.31.0",
    "httpx>=0.25.2",

    # Utilities
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    "tqdm>=4.66.1",
    "joblib>=1.3.2",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.1",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
]

# Jupyter and notebook dependencies
jupyter = [
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.9",
    "ipython>=8.18.1",
    "ipywidgets>=8.1.1",
]

# All optional dependencies
all = [
    "titans-finance[dev,jupyter]",
]

[project.urls]
Homepage = "https://github.com/titans-finance/titans-finance"
Documentation = "https://titans-finance.readthedocs.io"
Repository = "https://github.com/titans-finance/titans-finance.git"
"Bug Tracker" = "https://github.com/titans-finance/titans-finance/issues"

[project.scripts]
titans-pipeline = "data_engineering.etl.run_pipeline:main"
titans-api = "ai_engineering.api.main:main"
titans-train = "data_science.src.models.train:main"

[tool.hatch.build.targets.wheel]
packages = ["data_engineering", "data_science", "ai_engineering", "mlops"]

[tool.hatch.build.targets.sdist]
include = [
    "/data_engineering",
    "/data_science",
    "/ai_engineering",
    "/mlops",
    "/tests",
    "/docs",
    "/scripts",
    "/config",
    "pyproject.toml",
    "README.md",
    "IMPLEMENTATION_GUIDE.md",
    "docker-compose.yml",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["data_engineering", "data_science", "ai_engineering", "mlops"]
known_third_party = ["fastapi", "pandas", "numpy", "sklearn", "mlflow"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "sklearn.*",
    "mlflow.*",
    "plotly.*",
    "seaborn.*",
    "matplotlib.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=data_engineering",
    "--cov=data_science",
    "--cov=ai_engineering",
    "--cov=mlops",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["data_engineering", "data_science", "ai_engineering", "mlops"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration (alternative to flake8)
[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]
